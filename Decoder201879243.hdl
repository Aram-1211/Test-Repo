CHIP Decoder201879243 {
    IN A, B, C, D;
    OUT a, b, c, d, e, f, g;

    PARTS:
    Not(in = A, out = notA);
    Not(in = B, out = notB);
    Not(in = C, out = notC);
    Not(in = D, out = notD);

    // A
    And(a=C, b=notD, out=FB);
    And(a=A, b=D, out=SB);
    Or(a=FB, b=SB, out=ONEorTWO);
    And(a=A, b=notB, out=TB);
    And(a=notA, b=B, out=FthB1);
    And(a=FthB1, b=notC, out=FthB);
    Or(a=TB, b=FthB, out=THREEorFOUR);
    And(a=notB, b=C, out=FIFTHBrac);
    Or(a=ONEorTWO, b=THREEorFOUR, out=lastOrONE);
    Or(a=lastOrONE, b=FIFTHBrac, out=a);

    // B
    Or(a=A, b=B, out=ORoneB);
    Or(a=C, b=notD, out=ORtwoB);
    Or(a=ORoneB, b=ORtwoB, out=ORabcd);
    Or(a = notA, b = notB, out = ORthreeB);
    Or(a=C, b=D, out=ORfourB);
    Or(a = ORthreeB, b = ORfourB, out = ORfiveB);
    And(a = ORabcd, b = ORfiveB, out = ANDoneB);
    Or(a = notA, b = notB, out = ORsixB);
    Or(a = C, b = notD, out = ORsevenB);
    Or(a = ORsixB, b = ORsevenB, out = OReightB);
    Or(a = notA, b = B, out = ORnineB);
    Or(a = notC, b = notD, out = ORtenB);
    Or(a = ORnineB, b = ORtenB, out = ORelevenB);
    And(a = OReightB, b = ORelevenB, out = ANDtwoB);
    And(a = ANDoneB, b = ANDtwoB, out = b);

    // C
    Or(a = A, b = B, out = XA);
    Or(a = C, b = notD, out = Xb);
    And(a = XA, b = Xb, out = BvCvNOTD);
    Or(a = notB, b = notC, out = NBNVNC);
    Or(a = NBNVNC, b = notD, out = NBVNCVND);
    And(a = BvCvNOTD, b = NBVNCVND, out = B1ANDB2);
    Or(a = A, b = notB, out = AVNB);
    Or(a = C, b = D, out = CvD);
    Or(a = AVNB, b = CvD, out = AVNBvCvD);
    Or(a = notA, b = B, out = NAVB);
    Or(a = notC, b = D, out = NCvD);
    Or(a = NAVB, b = NCvD, out = NAVBvNCvD);
    And(a = AVNBvCvD, b = NAVBvNCvD, out = B3ANDB4);
    And(a = B1ANDB2, b = B3ANDB4, out = c);

    // D
    Or(a = notA, b = notB, out = X1);
    Or(a = X1, b = notC, out = X2);
    Or(a = notA, b = notB, out = Y1);
    Or(a = Y1, b = D, out = Y3);
    And(a = X2, b = Y3, out = XY1);
    Or(a = A, b = B, out = Z1);
    Or(a = notC, b = D, out = Z2);
    Or(a = Z1, b = Z2, out = Z3);
    And(a = XY1, b = Z3, out = d);

    // E
    And(a = notA, b = notB, out = FirstBrac);
    And(a = notA, b = notC, out = SecondBrac1);
    Or(a = SecondBrac1, b = notD, out = SecondBrac);
    Or(a = FirstBrac, b = SecondBrac, out = FBrac);
    And(a = notA, b = C, out = ThirdBrac1);
    And(a = ThirdBrac1, b = D, out = ThirdBrac);
    And(a = notB, b = notD, out = FourthBrac);
    Or(a = ThirdBrac, b = FourthBrac, out = TBrac);
    And(a = A, b = notC, out = FifthBrac1);
    And(a = FifthBrac1, b = D, out = FifthBrac);
    Or(a = FBrac, b = TBrac, out = A1orA2);
    Or(a = A1orA2, b = FifthBrac, out = e);

    // F
    Or(a = A, b = notD, out = A1);
    Or(a = A, b = notB, out = B1);
    Or(a = B1, b = C, out = B2);
    And(a = A1, b = B2, out = AB1);
    Or(a = B, b = C, out = C1);
    Or(a = C1, b = notD, out = C2);
    And(a = AB1, b = C2, out = f);

    // G
    Or(a = A, b = B, out = x1);
    Or(a = x1, b = notD, out = x2);
    Or(a=x1, b=notC, out=y1);
    And(a=x2, b=y1, out=xy1);
    Or(a = A, b = notC, out = z1);
    Or(a = z1, b = notD, out = z2);
    Or(a = notA, b = notB, out = w1);
    Or(a = C, b = notD, out = w2);
    Or(a = w1, b = w2, out = w3);
    And(a = z2, b = w3, out = zw1);
    And(a = xy1, b = zw1, out = g);
}